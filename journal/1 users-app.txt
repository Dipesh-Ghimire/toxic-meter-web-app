We’ll follow this plan:

Set up the User model with roles (Admin and Moderator).
Create forms for user registration and login.
Set up views for registration, login, and logout.
Define URLs for user authentication routes.
Build templates for login and registration pages.
Test everything step by step.

Step 1: Extend Django's User Model to Add Roles
We’ll use a UserProfile model to add roles (admin and moderator) to Django’s built-in User model.

Open users/models.py and add the following:
python
from django.db import models
from django.contrib.auth.models import User

# Role choices for users
USER_ROLES = [
    ('admin', 'Admin'),
    ('moderator', 'Moderator'),
]

# UserProfile model to extend User with roles
class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    role = models.CharField(max_length=10, choices=USER_ROLES, default='moderator')

    def __str__(self):
        return f"{self.user.username} ({self.role})"

Step 2: Create Signals to Auto-Create UserProfile
To ensure that every time a User object is created, a UserProfile is also created automatically.

Create a new file users/signals.py and add this:
python
from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver
from .models import UserProfile

# Automatically create a UserProfile when a User is created
@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.userprofile.save()

Connect the signals in users/apps.py:
python
Copy code
from django.apps import AppConfig

class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'

    def ready(self):
        import users.signals
Add the users app to INSTALLED_APPS in toxicmeter/settings.py (if not already done).
Step 3: Create Forms for Registration and Login
Create a new file users/forms.py and add:
python
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from .models import UserProfile

class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()
    first_name = forms.CharField(max_length=30)  # Add first name
    last_name = forms.CharField(max_length=30)   # Add last name
    role = forms.ChoiceField(choices=[('admin', 'Admin'), ('moderator', 'Moderator')])

    class Meta:
        model = User
        fields = ['username', 'email', 'first_name', 'last_name', 'password1', 'password2', 'role']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.first_name = self.cleaned_data['first_name']  # Save first name
        user.last_name = self.cleaned_data['last_name']    # Save last name
        if commit:
            user.save()
            role = self.cleaned_data['role']  # Save role in UserProfile
            user.userprofile.role = role
            user.userprofile.save()
        return user



# Login Form
class UserLoginForm(forms.Form):
    username = forms.CharField()
    password = forms.CharField(widget=forms.PasswordInput)
Step 4: Create Views for Registration, Login, and Logout
Open users/views.py and add the following:
python
Copy code
from django.shortcuts import render
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from .forms import UserRegisterForm, UserLoginForm
from django.contrib import messages

# Registration View
def register(request):
    if request.method == 'POST':
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, "Account created successfully! You can now log in.")
            return redirect('login')
    else:
        form = UserRegisterForm()
    return render(request, 'users/register.html', {'form': form})

# Login View
def user_login(request):
    if request.method == 'POST':
        form = UserLoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(request, username=username, password=password)
            if user:
                login(request, user)
                return redirect('dashboard')  # Redirect to dashboard
            else:
                messages.error(request, "Invalid username or password.")
    else:
        form = UserLoginForm()
    return render(request, 'users/login.html', {'form': form})

# Logout View
@login_required
def user_logout(request):
    logout(request)
    messages.info(request, "You have been logged out.")
    return redirect('login')

# Dashboard View (accessible after login)
@login_required
def dashboard(request):
    return render(request, 'users/dashboard.html', {'user': request.user})


Step 5: Define URLs for Users App
Create a users/urls.py file and add:
python
Copy code
from django.urls import path
from . import views

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.user_login, name='login'),
    path('logout/', views.user_logout, name='logout'),
    path('dashboard/', views.dashboard, name='dashboard'),
]
Connect these URLs to the main project toxicmeter/urls.py:
python
Copy code
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('users/', include('users.urls')),  # Include users app URLs
]
Step 6: Create Templates for Authentication
Create a templates folder inside your users app:

bash
Copy code
users/
└── templates/
    └── users/
        ├── register.html
        ├── login.html
        └── dashboard.html
register.html:

html
Copy code
<h2>Register</h2>
<form method="POST">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Register</button>
</form>
<p>Already have an account? <a href="{% url 'login' %}">Login</a></p>
login.html:

html
Copy code
<h2>Login</h2>
<form method="POST">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Login</button>
</form>
<p>Don't have an account? <a href="{% url 'register' %}">Register</a></p>
dashboard.html:

html
Copy code
<h2>Welcome, {{ user.username }}!</h2>
<p>You are logged in as {{ user.userprofile.role }}.</p>
<a href="{% url 'logout' %}">Logout</a>
Step 7: Test the Application
Run the development server:

bash
Copy code
python manage.py runserver
Visit the following URLs in your browser:

Register: http://127.0.0.1:8000/users/register/
Login: http://127.0.0.1:8000/users/login/
Dashboard: http://127.0.0.1:8000/users/dashboard/ (only accessible after logging in).


